//
// Created by Dustin Cobas <dustin.cobas@gmail.com> on 6/7/2023.
//

#ifndef SRI_CONSTRUCT_BIG_BWT_H_
#define SRI_CONSTRUCT_BIG_BWT_H_

#ifndef BIGBWT_EXE
#define BIGBWT_EXE "bigbwt"
#endif

#include <cstdint>
#include <string>
#include <filesystem>

#include <sdsl/config.hpp>
#include <sdsl/int_vector_buffer.hpp>

#include "construct_base.h"

namespace sri {

namespace conf {
const std::string KEY_BIG_BWT = "big_bwt";
const std::string KEY_BIG_BWT_LOG = "big_bwt_log";
const std::string KEY_BIG_BWT_SSA = "big_bwt_ssa";
const std::string KEY_BIG_BWT_ESA = "big_bwt_esa";
} // namespace conf

namespace big_bwt {

void registerBigBWTFiles(const std::string &t_data_path, sdsl::cache_config &t_config) {
  t_config.file_map[conf::KEY_BIG_BWT] = t_data_path + ".bwt";
  t_config.file_map[conf::KEY_BIG_BWT_LOG] = t_data_path + ".log";
  t_config.file_map[conf::KEY_BIG_BWT_SSA] = t_data_path + ".ssa";
  t_config.file_map[conf::KEY_BIG_BWT_ESA] = t_data_path + ".esa";
}

void constructBWT(const std::string &t_data_path, const std::string &t_bigbwt_exe) {
  auto command = t_bigbwt_exe + " -s -e " + t_data_path;
  std::system(command.c_str());
}

template<uint8_t t_width>
void constructIndexBaseItems(const std::string &t_data_path,
                             sdsl::cache_config &t_config,
                             const std::string &t_big_bwt_exe = BIGBWT_EXE) {

  // Register files generated by big-bwt
  registerBigBWTFiles(t_data_path, t_config);

  // Construct BWT
  if (!cache_file_exists(conf::KEY_BIG_BWT, t_config)) {
    auto event = sdsl::memory_monitor::event("BWT");
    constructBWT(t_data_path, t_big_bwt_exe);
  }
}

} // namespace big_bwt
} // namespace sri

#endif //SRI_CONSTRUCT_BIG_BWT_H_
